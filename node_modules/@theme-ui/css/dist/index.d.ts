import * as CSS from 'csstype';
import { SystemStyleObject, Theme } from './types';
export * from './types';
export declare function get(obj: object, key: string | number, def?: unknown, p?: number, undef?: unknown): any;
export declare const multiples: {
    marginX: string[];
    marginY: string[];
    paddingX: string[];
    paddingY: string[];
    size: string[];
};
export declare const scales: {
    readonly color: "colors";
    readonly backgroundColor: "colors";
    readonly borderColor: "colors";
    readonly caretColor: "colors";
    readonly opacity: "opacities";
    readonly margin: "space";
    readonly marginTop: "space";
    readonly marginRight: "space";
    readonly marginBottom: "space";
    readonly marginLeft: "space";
    readonly marginX: "space";
    readonly marginY: "space";
    readonly padding: "space";
    readonly paddingTop: "space";
    readonly paddingRight: "space";
    readonly paddingBottom: "space";
    readonly paddingLeft: "space";
    readonly paddingX: "space";
    readonly paddingY: "space";
    readonly top: "space";
    readonly right: "space";
    readonly bottom: "space";
    readonly left: "space";
    readonly gridGap: "space";
    readonly gridColumnGap: "space";
    readonly gridRowGap: "space";
    readonly gap: "space";
    readonly columnGap: "space";
    readonly rowGap: "space";
    readonly fontFamily: "fonts";
    readonly fontSize: "fontSizes";
    readonly fontWeight: "fontWeights";
    readonly lineHeight: "lineHeights";
    readonly letterSpacing: "letterSpacings";
    readonly border: "borders";
    readonly borderTop: "borders";
    readonly borderRight: "borders";
    readonly borderBottom: "borders";
    readonly borderLeft: "borders";
    readonly borderWidth: "borderWidths";
    readonly borderStyle: "borderStyles";
    readonly borderRadius: "radii";
    readonly borderTopRightRadius: "radii";
    readonly borderTopLeftRadius: "radii";
    readonly borderBottomRightRadius: "radii";
    readonly borderBottomLeftRadius: "radii";
    readonly borderTopWidth: "borderWidths";
    readonly borderTopColor: "colors";
    readonly borderTopStyle: "borderStyles";
    readonly borderBottomWidth: "borderWidths";
    readonly borderBottomColor: "colors";
    readonly borderBottomStyle: "borderStyles";
    readonly borderLeftWidth: "borderWidths";
    readonly borderLeftColor: "colors";
    readonly borderLeftStyle: "borderStyles";
    readonly borderRightWidth: "borderWidths";
    readonly borderRightColor: "colors";
    readonly borderRightStyle: "borderStyles";
    readonly outlineColor: "colors";
    readonly boxShadow: "shadows";
    readonly textShadow: "shadows";
    readonly zIndex: "zIndices";
    readonly width: "sizes";
    readonly minWidth: "sizes";
    readonly maxWidth: "sizes";
    readonly height: "sizes";
    readonly minHeight: "sizes";
    readonly maxHeight: "sizes";
    readonly flexBasis: "sizes";
    readonly size: "sizes";
    readonly fill: "colors";
    readonly stroke: "colors";
};
declare type CssPropsArgument = {
    theme: Theme;
} | Theme;
export declare const css: (args?: SystemStyleObject) => (props?: CssPropsArgument) => CSS.Properties<string | 0>;
