{"version":3,"sources":["../../src/utils/develop-proxy.ts"],"names":["noop","adminFolder","path","join","dirname","require","resolve","serveAdmin","url","index","startDevelopProxy","input","shouldServeRestartingScreen","proxy","httpProxy","createProxyServer","target","targetPort","changeOrigin","preserveHeaderKeyCase","autoRewrite","ws","on","server","req","res","process","env","GATSBY_EXPERIMENTAL_ENABLE_ADMIN","wasAdminRequest","programPath","then","services","setHeader","end","JSON","stringify","fs","readFileSync","restartingScreen","web","socket","head","listen","proxyPort","serveRestartingScreen","serveSite"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAQA,MAAMA,IAAI,GAAG,MAAY,CAAE,CAA3B;;AAEA,MAAMC,WAAW,GAAGC,cAAKC,IAAL,CAClBD,cAAKE,OAAL,CAAaC,OAAO,CAACC,OAAR,CAAiB,cAAjB,CAAb,CADkB,EAEjB,QAFiB,CAApB;;AAKA,MAAMC,UAAU,GAAG,iBAAG;AACpBL,EAAAA,IAAI,EAAED,WADc;AAEpBO,EAAAA,GAAG,EAAG,WAFc;AAGpBC,EAAAA,KAAK,EAAG;AAHY,CAAH,CAAnB;;AAMO,MAAMC,iBAAiB,GAAIC,KAAD,IAIX;AACpB,MAAIC,2BAA2B,GAAG,KAAlC;;AAEA,QAAMC,KAAK,GAAGC,mBAAUC,iBAAV,CAA4B;AACxCC,IAAAA,MAAM,EAAG,oBAAmBL,KAAK,CAACM,UAAW,EADL;AAExCC,IAAAA,YAAY,EAAE,IAF0B;AAGxCC,IAAAA,qBAAqB,EAAE,IAHiB;AAIxCC,IAAAA,WAAW,EAAE,IAJ2B;AAKxCC,IAAAA,EAAE,EAAE;AALoC,GAA5B,CAAd,CAHoB,CAWpB;AACA;;;AACAR,EAAAA,KAAK,CAACS,EAAN,CAAU,OAAV,EAAkBtB,IAAlB;AAEA,QAAMuB,MAAM,GAAG,wBAAa,CAACC,GAAD,EAAMC,GAAN,KAAc;AACxC,QAAIC,OAAO,CAACC,GAAR,CAAYC,gCAAhB,EAAkD;AAChD,YAAMC,eAAe,GAAGtB,UAAU,CAACiB,GAAD,EAAMC,GAAN,CAAlC;;AACA,UAAII,eAAJ,EAAqB;AACnB;AACD;AACF,KANuC,CAQxC;;;AACA,QAAIL,GAAG,CAAChB,GAAJ,KAAa,cAAjB,EAAgC;AAC9B,oCAAYG,KAAK,CAACmB,WAAlB,EAA+BC,IAA/B,CAAoCC,QAAQ,IAAI;AAC9CP,QAAAA,GAAG,CAACQ,SAAJ,CAAe,cAAf,EAA+B,kBAA/B;AACAR,QAAAA,GAAG,CAACS,GAAJ,CAAQC,IAAI,CAACC,SAAL,CAAeJ,QAAf,CAAR;AACD,OAHD;AAIA;AACD;;AAED,QAAIR,GAAG,CAAChB,GAAJ,KAAa,yBAAjB,EAA2C;AACzCiB,MAAAA,GAAG,CAACS,GAAJ,CACEG,iBAAGC,YAAH,CAAgBjC,OAAO,CAACC,OAAR,CAAiB,oCAAjB,CAAhB,CADF;AAGA;AACD;;AAED,QACEM,2BAA2B,IAC3BY,GAAG,CAAChB,GAAJ,KAAa,6BAFf,EAGE;AACAiB,MAAAA,GAAG,CAACS,GAAJ,CAAQK,yBAAR;AACA;AACD;;AAED1B,IAAAA,KAAK,CAAC2B,GAAN,CAAUhB,GAAV,EAAeC,GAAf;AACD,GAjCc,CAAf;AAmCAF,EAAAA,MAAM,CAACD,EAAP,CAAW,SAAX,EAAqB,UAAUE,GAAV,EAAeiB,MAAf,EAAuBC,IAAvB,EAA6B;AAChD7B,IAAAA,KAAK,CAACQ,EAAN,CAASG,GAAT,EAAciB,MAAd,EAAsBC,IAAtB;AACD,GAFD;AAIAnB,EAAAA,MAAM,CAACoB,MAAP,CAAchC,KAAK,CAACiC,SAApB;AAEA,SAAO;AACLrB,IAAAA,MADK;AAELsB,IAAAA,qBAAqB,EAAE,MAAY;AACjCjC,MAAAA,2BAA2B,GAAG,IAA9B;AACD,KAJI;AAKLkC,IAAAA,SAAS,EAAE,MAAY;AACrBlC,MAAAA,2BAA2B,GAAG,KAA9B;AACD;AAPI,GAAP;AASD,CArEM","sourcesContent":["import { createServer } from \"http\"\nimport httpProxy from \"http-proxy\"\nimport path from \"path\"\nimport fs from \"fs-extra\"\nimport { getServices } from \"gatsby-core-utils/dist/service-lock\"\nimport st from \"st\"\nimport restartingScreen from \"./restarting-screen\"\n\ninterface IProxyControls {\n  serveRestartingScreen: () => void\n  serveSite: () => void\n  server: any\n}\n\nconst noop = (): void => {}\n\nconst adminFolder = path.join(\n  path.dirname(require.resolve(`gatsby-admin`)),\n  `public`\n)\n\nconst serveAdmin = st({\n  path: adminFolder,\n  url: `/___admin`,\n  index: `index.html`,\n})\n\nexport const startDevelopProxy = (input: {\n  proxyPort: number\n  targetPort: number\n  programPath: string\n}): IProxyControls => {\n  let shouldServeRestartingScreen = false\n\n  const proxy = httpProxy.createProxyServer({\n    target: `http://localhost:${input.targetPort}`,\n    changeOrigin: true,\n    preserveHeaderKeyCase: true,\n    autoRewrite: true,\n    ws: true,\n  })\n\n  // Noop on proxy errors, as this throws a bunch of \"Socket hang up\"\n  // ones whenever the page is refreshed\n  proxy.on(`error`, noop)\n\n  const server = createServer((req, res) => {\n    if (process.env.GATSBY_EXPERIMENTAL_ENABLE_ADMIN) {\n      const wasAdminRequest = serveAdmin(req, res)\n      if (wasAdminRequest) {\n        return\n      }\n    }\n\n    // Add a route at localhost:8000/___services for service discovery\n    if (req.url === `/___services`) {\n      getServices(input.programPath).then(services => {\n        res.setHeader(`Content-Type`, `application/json`)\n        res.end(JSON.stringify(services))\n      })\n      return\n    }\n\n    if (req.url === `/socket.io/socket.io.js`) {\n      res.end(\n        fs.readFileSync(require.resolve(`socket.io-client/dist/socket.io.js`))\n      )\n      return\n    }\n\n    if (\n      shouldServeRestartingScreen ||\n      req.url === `/___debug-restarting-screen`\n    ) {\n      res.end(restartingScreen)\n      return\n    }\n\n    proxy.web(req, res)\n  })\n\n  server.on(`upgrade`, function (req, socket, head) {\n    proxy.ws(req, socket, head)\n  })\n\n  server.listen(input.proxyPort)\n\n  return {\n    server,\n    serveRestartingScreen: (): void => {\n      shouldServeRestartingScreen = true\n    },\n    serveSite: (): void => {\n      shouldServeRestartingScreen = false\n    },\n  }\n}\n"],"file":"develop-proxy.js"}